// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"quocbang/swagger-microservices/swagger/models"
)

// ListUnauthorizedAccountHandlerFunc turns a function with the right signature into a list unauthorized account handler
type ListUnauthorizedAccountHandlerFunc func(ListUnauthorizedAccountParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUnauthorizedAccountHandlerFunc) Handle(params ListUnauthorizedAccountParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListUnauthorizedAccountHandler interface for that can handle valid list unauthorized account params
type ListUnauthorizedAccountHandler interface {
	Handle(ListUnauthorizedAccountParams, *models.Principal) middleware.Responder
}

// NewListUnauthorizedAccount creates a new http.Handler for the list unauthorized account operation
func NewListUnauthorizedAccount(ctx *middleware.Context, handler ListUnauthorizedAccountHandler) *ListUnauthorizedAccount {
	return &ListUnauthorizedAccount{Context: ctx, Handler: handler}
}

/* ListUnauthorizedAccount swagger:route GET /account/unauthorized/department-oid/{departmentOID} account listUnauthorizedAccount

查詢可新增角色授權帳號清單

*/
type ListUnauthorizedAccount struct {
	Context *middleware.Context
	Handler ListUnauthorizedAccountHandler
}

func (o *ListUnauthorizedAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListUnauthorizedAccountParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListUnauthorizedAccountOKBody list unauthorized account o k body
//
// swagger:model ListUnauthorizedAccountOKBody
type ListUnauthorizedAccountOKBody struct {

	// data
	Data []*ListUnauthorizedAccountOKBodyDataItems0 `json:"data"`
}

// Validate validates this list unauthorized account o k body
func (o *ListUnauthorizedAccountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUnauthorizedAccountOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listUnauthorizedAccountOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list unauthorized account o k body based on the context it is used
func (o *ListUnauthorizedAccountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUnauthorizedAccountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listUnauthorizedAccountOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListUnauthorizedAccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUnauthorizedAccountOKBody) UnmarshalBinary(b []byte) error {
	var res ListUnauthorizedAccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ListUnauthorizedAccountOKBodyDataItems0 list unauthorized account o k body data items0
//
// swagger:model ListUnauthorizedAccountOKBodyDataItems0
type ListUnauthorizedAccountOKBodyDataItems0 struct {

	// 人員工號
	EmployeeID string `json:"employeeID,omitempty"`
}

// Validate validates this list unauthorized account o k body data items0
func (o *ListUnauthorizedAccountOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list unauthorized account o k body data items0 based on context it is used
func (o *ListUnauthorizedAccountOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListUnauthorizedAccountOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUnauthorizedAccountOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ListUnauthorizedAccountOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
