// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"quocbang/swagger-microservices/swagger/models"
)

// CreateAccountAuthorizationHandlerFunc turns a function with the right signature into a create account authorization handler
type CreateAccountAuthorizationHandlerFunc func(CreateAccountAuthorizationParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAccountAuthorizationHandlerFunc) Handle(params CreateAccountAuthorizationParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateAccountAuthorizationHandler interface for that can handle valid create account authorization params
type CreateAccountAuthorizationHandler interface {
	Handle(CreateAccountAuthorizationParams, *models.Principal) middleware.Responder
}

// NewCreateAccountAuthorization creates a new http.Handler for the create account authorization operation
func NewCreateAccountAuthorization(ctx *middleware.Context, handler CreateAccountAuthorizationHandler) *CreateAccountAuthorization {
	return &CreateAccountAuthorization{Context: ctx, Handler: handler}
}

/* CreateAccountAuthorization swagger:route POST /account/authorization account createAccountAuthorization

新增帳號權限

- 不允許授權系統管理員(ADMINISTRATOR)與主管(LEADER)角色.
- 若想要授權系統管理員或主管角色時請再提登入異動單.


*/
type CreateAccountAuthorization struct {
	Context *middleware.Context
	Handler CreateAccountAuthorizationHandler
}

func (o *CreateAccountAuthorization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateAccountAuthorizationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateAccountAuthorizationBody create account authorization body
//
// swagger:model CreateAccountAuthorizationBody
type CreateAccountAuthorizationBody struct {

	// 人員工號
	// Required: true
	EmployeeID *string `json:"employeeID"`

	// roles
	// Required: true
	Roles models.Roles `json:"roles"`
}

// Validate validates this create account authorization body
func (o *CreateAccountAuthorizationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmployeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateAccountAuthorizationBody) validateEmployeeID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"employeeID", "body", o.EmployeeID); err != nil {
		return err
	}

	return nil
}

func (o *CreateAccountAuthorizationBody) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"roles", "body", o.Roles); err != nil {
		return err
	}

	if err := o.Roles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "roles")
		}
		return err
	}

	return nil
}

// ContextValidate validate this create account authorization body based on the context it is used
func (o *CreateAccountAuthorizationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateAccountAuthorizationBody) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Roles.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "roles")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateAccountAuthorizationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateAccountAuthorizationBody) UnmarshalBinary(b []byte) error {
	var res CreateAccountAuthorizationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
