// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"quocbang/swagger-microservices/swagger/models"
)

// UpdateAccountAuthorizationHandlerFunc turns a function with the right signature into a update account authorization handler
type UpdateAccountAuthorizationHandlerFunc func(UpdateAccountAuthorizationParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAccountAuthorizationHandlerFunc) Handle(params UpdateAccountAuthorizationParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateAccountAuthorizationHandler interface for that can handle valid update account authorization params
type UpdateAccountAuthorizationHandler interface {
	Handle(UpdateAccountAuthorizationParams, *models.Principal) middleware.Responder
}

// NewUpdateAccountAuthorization creates a new http.Handler for the update account authorization operation
func NewUpdateAccountAuthorization(ctx *middleware.Context, handler UpdateAccountAuthorizationHandler) *UpdateAccountAuthorization {
	return &UpdateAccountAuthorization{Context: ctx, Handler: handler}
}

/* UpdateAccountAuthorization swagger:route PUT /account/authorization/{employeeID} account updateAccountAuthorization

修改帳號角色

- 不允許授權系統管理員(ADMINISTRATOR)與主管(LEADER)角色.
- 若想要授權系統管理員或主管角色時請再提登入異動單.
- 允許修改角色清單或者重置密碼需求


*/
type UpdateAccountAuthorization struct {
	Context *middleware.Context
	Handler UpdateAccountAuthorizationHandler
}

func (o *UpdateAccountAuthorization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateAccountAuthorizationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateAccountAuthorizationBody update account authorization body
//
// swagger:model UpdateAccountAuthorizationBody
type UpdateAccountAuthorizationBody struct {

	// 重置密碼
	// Required: true
	ResetPassword *bool `json:"resetPassword"`

	// roles
	// Required: true
	Roles models.Roles `json:"roles"`
}

// Validate validates this update account authorization body
func (o *UpdateAccountAuthorizationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResetPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAccountAuthorizationBody) validateResetPassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"resetPassword", "body", o.ResetPassword); err != nil {
		return err
	}

	return nil
}

func (o *UpdateAccountAuthorizationBody) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"roles", "body", o.Roles); err != nil {
		return err
	}

	if err := o.Roles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "roles")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update account authorization body based on the context it is used
func (o *UpdateAccountAuthorizationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAccountAuthorizationBody) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Roles.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "roles")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAccountAuthorizationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAccountAuthorizationBody) UnmarshalBinary(b []byte) error {
	var res UpdateAccountAuthorizationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
