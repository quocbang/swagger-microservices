// Code generated by go-swagger; DO NOT EDIT.

package production

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"quocbang/swagger-microservices/swagger/models"
)

// GetlimitaryOKCode is the HTTP code returned for type GetlimitaryOK
const GetlimitaryOKCode int = 200

/*GetlimitaryOK OK

swagger:response getlimitaryOK
*/
type GetlimitaryOK struct {

	/*
	  In: Body
	*/
	Payload *GetlimitaryOKBody `json:"body,omitempty"`
}

// NewGetlimitaryOK creates GetlimitaryOK with default headers values
func NewGetlimitaryOK() *GetlimitaryOK {

	return &GetlimitaryOK{}
}

// WithPayload adds the payload to the getlimitary o k response
func (o *GetlimitaryOK) WithPayload(payload *GetlimitaryOKBody) *GetlimitaryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getlimitary o k response
func (o *GetlimitaryOK) SetPayload(payload *GetlimitaryOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetlimitaryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetlimitaryDefault Unexpected error

swagger:response getlimitaryDefault
*/
type GetlimitaryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetlimitaryDefault creates GetlimitaryDefault with default headers values
func NewGetlimitaryDefault(code int) *GetlimitaryDefault {
	if code <= 0 {
		code = 500
	}

	return &GetlimitaryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the getlimitary default response
func (o *GetlimitaryDefault) WithStatusCode(code int) *GetlimitaryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the getlimitary default response
func (o *GetlimitaryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the getlimitary default response
func (o *GetlimitaryDefault) WithPayload(payload *models.Error) *GetlimitaryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getlimitary default response
func (o *GetlimitaryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetlimitaryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
