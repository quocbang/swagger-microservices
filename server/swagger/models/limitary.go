// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Limitary limitary
//
// swagger:model Limitary
type Limitary struct {

	// min
	// Read Only: true
	// Format: date-time
	Min strfmt.DateTime `json:"min,omitempty"`

	// max
	// Read Only: true
	// Format: date-time
	Max strfmt.DateTime `json:"max,omitempty"`
}

// Validate validates this limitary
func (m *Limitary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Limitary) validateMin(formats strfmt.Registry) error {
	if swag.IsZero(m.Min) { // not required
		return nil
	}

	if err := validate.FormatOf("min", "body", "date-time", m.Min.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Limitary) validateMax(formats strfmt.Registry) error {
	if swag.IsZero(m.Max) { // not required
		return nil
	}

	if err := validate.FormatOf("max", "body", "date-time", m.Max.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this limitary based on the context it is used
func (m *Limitary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Limitary) contextValidateMin(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "min", "body", strfmt.DateTime(m.Min)); err != nil {
		return err
	}

	return nil
}

func (m *Limitary) contextValidateMax(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "max", "body", strfmt.DateTime(m.Max)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Limitary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Limitary) UnmarshalBinary(b []byte) error {
	var res Limitary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
