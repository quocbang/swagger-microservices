// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoginResponse login response
//
// swagger:model LoginResponse
type LoginResponse struct {

	// authorized departments
	AuthorizedDepartments Departments `json:"authorizedDepartments,omitempty"`

	// roles
	Roles Roles `json:"roles,omitempty"`

	// 使用者令牌(token)
	Token string `json:"token,omitempty"`

	// token 過期時間
	// Example: 2017-07-21T17:32:28Z
	// Format: date-time
	TokenExpiry strfmt.DateTime `json:"tokenExpiry,omitempty"`
}

// Validate validates this login response
func (m *LoginResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizedDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExpiry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginResponse) validateAuthorizedDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizedDepartments) { // not required
		return nil
	}

	if err := m.AuthorizedDepartments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authorizedDepartments")
		}
		return err
	}

	return nil
}

func (m *LoginResponse) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := m.Roles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("roles")
		}
		return err
	}

	return nil
}

func (m *LoginResponse) validateTokenExpiry(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenExpiry) { // not required
		return nil
	}

	if err := validate.FormatOf("tokenExpiry", "body", "date-time", m.TokenExpiry.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this login response based on the context it is used
func (m *LoginResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorizedDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginResponse) contextValidateAuthorizedDepartments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthorizedDepartments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authorizedDepartments")
		}
		return err
	}

	return nil
}

func (m *LoginResponse) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Roles.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("roles")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoginResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoginResponse) UnmarshalBinary(b []byte) error {
	var res LoginResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
